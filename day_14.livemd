# Day 14

## Part 1

```elixir
defmodule BathroomSecurity do
  def run(str_list, seconds, x, y) do
    robots = str_list |> Enum.map(&parse_line/1)
    robot_locs = robots |> Enum.map(fn robot -> move_robot(robot, seconds, x, y) end)
    {q1, q2, q3, q4} =
      Enum.reduce(robot_locs, {0, 0, 0, 0}, fn [loc_x, loc_y], {acc_q1, acc_q2, acc_q3, acc_q4} ->
        x_cutoff = ((x - 1) / 2) |> trunc
        y_cutoff = ((y - 1) / 2) |> trunc
        cond do
          loc_x < x_cutoff && loc_y < y_cutoff -> {acc_q1+1, acc_q2, acc_q3, acc_q4}
          loc_x > x_cutoff && loc_y < y_cutoff -> {acc_q1, acc_q2+1, acc_q3, acc_q4}
          loc_x < x_cutoff && loc_y > y_cutoff -> {acc_q1, acc_q2, acc_q3+1, acc_q4}
          loc_x > x_cutoff && loc_y > y_cutoff -> {acc_q1, acc_q2, acc_q3, acc_q4+1}
          true -> {acc_q1, acc_q2, acc_q3, acc_q4}
        end
      end)
    q1 * q2 * q3 * q4
  end
  
  def parse_line(str) do
    [p_str, v_str] = String.split(str, " ", trim: true)
    p = p_str |> String.replace("p=", "") |> String.split(",", trim: true) |> Enum.map(&String.to_integer/1)
    v = v_str |> String.replace("v=", "") |> String.split(",", trim: true) |> Enum.map(&String.to_integer/1)
    {p, v}
  end

  def move_robot({[p_x, p_y], [v_x, v_y]}, seconds, x, y) do
    [(p_x + (v_x * seconds)) |> rem(x) |> abs_index(x),
     (p_y + (v_y * seconds)) |> rem(y) |> abs_index(y)]
  end

  def abs_index(index, _divisor) when index >= 0, do: index
  def abs_index(index, divisor), do: index + divisor
end
```

```elixir
test_input = "p=0,4 v=3,-3
p=6,3 v=-1,-3
p=10,3 v=-1,2
p=2,0 v=2,-1
p=0,0 v=1,3
p=3,0 v=-2,-2
p=7,6 v=-1,-3
p=3,0 v=-1,-2
p=9,3 v=2,3
p=7,3 v=-1,2
p=2,4 v=2,-3
p=9,5 v=-3,-3" |> String.split("\r\n", trim: true)
```

```elixir
BathroomSecurity.run(test_input, 100, 11, 7)
```

```elixir
input =
  "c:/Users/slims/Downloads/day_14_robots.txt"
  |> File.read!
  |> String.split("\n", trim: true)
```

```elixir
BathroomSecurity.run(input, 100, 101, 103)
```

## Part 2

```elixir
defmodule BoardViz do
  def run(str_list, max_seconds, x, y) do
    {_final_robot_locs, {_val, seconds}} = find_closest_proximity(str_list, max_seconds, x, y)
    visualize_after(str_list, seconds, x, y)
    seconds
  end
  
  def visualize_after(str_list, seconds, x, y) do
    robots = str_list |> Enum.map(&BathroomSecurity.parse_line/1)
    robot_locs = robots |> Enum.map(fn robot -> BathroomSecurity.move_robot(robot, seconds, x, y) end)
    visualize(robot_locs, x, y)
  end
  
  def visualize(robot_locs, x, y) do
    map =
      Enum.reduce(robot_locs, %{}, fn [x, y], acc_map ->
        existing = Map.get(acc_map, {x, y}, 0)
        Map.put(acc_map, {x, y}, existing + 1)
      end)

      0..(y-1) |> Enum.each(fn y_index ->
        0..(x-1) |> Enum.reduce("", fn x_index, acc_row ->
          acc_row <> "#{Map.get(map, {x_index, y_index}, ".")}"
        end) |> IO.inspect
      end)
  end

  def find_closest_proximity(str_list, max_seconds, x, y) do
    robots = str_list |> Enum.map(&BathroomSecurity.parse_line/1)

    # second part of tuple is {lowest_proximity, seconds}
    1..max_seconds |> Enum.reduce({robots, {nil, 0}}, fn seconds, {acc_robots, min_proximity_data} ->
      new_robots =
        acc_robots |> Enum.map(fn {_, [v_x, v_y]}=robot ->
          new_robot_loc = BathroomSecurity.move_robot(robot, 1, x, y)
          {new_robot_loc, [v_x, v_y]}
        end)
      new_robot_locs = Enum.map(new_robots, fn {loc, _vel} -> loc end)

      current_proximity = calculate_proximity(new_robot_locs)
      {min_proximity, _seconds} = min_proximity_data
      new_min_proximity_data =
        cond do
          min_proximity == nil -> {current_proximity, seconds}
          current_proximity < min_proximity -> {current_proximity, seconds}
          true -> min_proximity_data
        end
      {new_robots, new_min_proximity_data}
    end)
  end

  def calculate_proximity(robot_locs) do
    [sum_x, sum_y] =
      Enum.reduce(robot_locs, [0, 0], fn [x, y], [acc_x, acc_y] -> [acc_x + x, acc_y + y] end)
    size = length(robot_locs)
    avg_x = sum_x / size
    avg_y = sum_y / size

    Enum.reduce(robot_locs, 0, fn [x, y], acc ->
      acc + abs(avg_x - x) + abs(avg_y - y)
    end)
  end
end
```

```elixir
BoardViz.run(test_input, 100, 11, 7)
```

```elixir
{robot_locs, closest} = BoardViz.find_closest_proximity(test_input, 100, 11, 7)
```

```elixir
{_, closest} = BoardViz.find_closest_proximity(input, 1000, 101, 103)
```

```elixir
BoardViz.run(input, 10000, 101, 103)
```
